{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f3714c5c-c88c-4a55-911a-09e687f7e67b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "474a16614c31423083c417abb38665bd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox(children=(HBox(children=(VBox(children=(Dropdown(description='Preset', index=1, options=('Fast demo', 'Baâ€¦"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "try:\n",
    "    get_ipython().run_line_magic('matplotlib', 'inline')\n",
    "except Exception:\n",
    "    pass\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.fft import rfft, rfftfreq\n",
    "import os\n",
    "import ipywidgets as widgets\n",
    "from IPython.display import display, clear_output, HTML\n",
    "from tqdm.notebook import tqdm\n",
    "import matplotlib.animation as animation\n",
    "\n",
    "plt.rcParams.update({\"figure.dpi\": 120})\n",
    "\n",
    "def run_sonic_bh_mvp_rk4(\n",
    "    Nx=300, L=1.0,\n",
    "    v_left=0.2, v_right=1.5, x_h=0.5, transition_width=0.03,\n",
    "    c0=1.0, CFL=0.4, Nt=900,\n",
    "    k0=60.0, packet_center=0.15, packet_width=0.03,\n",
    "    pml_fraction=0.12, sigma_max_factor=0.5,\n",
    "    max_snapshots=200, progress_callback=None, save_outputs=False,\n",
    "    outdir=\"./sonic_bh_mvp_output\"\n",
    "):\n",
    "    # basic validation\n",
    "    if Nx < 16 or Nt < 32:\n",
    "        raise ValueError(\"Nx must be >=16 and Nt must be >=32 for stable runs.\")\n",
    "    x = np.linspace(0, L, Nx)\n",
    "    dx = x[1] - x[0]\n",
    "\n",
    "    if transition_width <= 0 or transition_width < 2*dx:\n",
    "        transition_width = max(transition_width, 2*dx)\n",
    "        print(f\"Adjusted transition_width to {transition_width:.3e} to avoid sub-grid transition.\")\n",
    "\n",
    "    v = v_left + 0.5*(v_right - v_left)*(1 + np.tanh((x - x_h)/transition_width))\n",
    "    c = c0 * np.ones_like(x)\n",
    "\n",
    "    dt = float(CFL) * dx / (np.max(np.abs(v)) + np.max(c))\n",
    "    t = np.arange(Nt) * dt\n",
    "\n",
    "    pml_width = float(max(0.0, pml_fraction * L))\n",
    "    sigma = np.zeros_like(x)\n",
    "    sigma_max = 0.0\n",
    "    if pml_width > 0:\n",
    "        left_mask = x < (x[0] + pml_width)\n",
    "        right_mask = x > (x[-1] - pml_width)\n",
    "        if np.any(left_mask):\n",
    "            xi = (x[left_mask] - x[0]) / pml_width\n",
    "            sigma[left_mask] = ((1.0 - xi)**3)\n",
    "        if np.any(right_mask):\n",
    "            xi = (x[right_mask] - (x[-1] - pml_width)) / pml_width\n",
    "            sigma[right_mask] = (xi**3)\n",
    "        sigma_max = float(sigma_max_factor * (c0 / pml_width))\n",
    "        sigma_max = min(sigma_max, 1e3)\n",
    "        sigma = sigma * sigma_max\n",
    "\n",
    "    phi = np.zeros_like(x, dtype=float)\n",
    "    phi_t0 = np.exp(-((x - packet_center)**2) / (2 * packet_width**2)) * np.cos(k0 * (x - packet_center))\n",
    "    psi = phi_t0.copy()\n",
    "\n",
    "    probe_left_idx = int(0.1 * (Nx - 1))\n",
    "    probe_right_idx = int(0.9 * (Nx - 1))\n",
    "    probe_left = np.zeros(Nt)\n",
    "    probe_right = np.zeros(Nt)\n",
    "\n",
    "    snap_step = max(1, Nt // max_snapshots)\n",
    "    n_snaps = (Nt + snap_step - 1) // snap_step\n",
    "    space_time_snaps = np.zeros((n_snaps, Nx), dtype=np.float32)\n",
    "    snap_times = np.zeros(n_snaps)\n",
    "    snap_i = 0\n",
    "\n",
    "    energy = np.zeros(Nt)\n",
    "\n",
    "    def Dx(u):\n",
    "        dudx = np.zeros_like(u)\n",
    "        dudx[1:-1] = (u[2:] - u[:-2]) / (2 * dx)\n",
    "        dudx[0] = (u[1] - u[0]) / dx\n",
    "        dudx[-1] = (u[-1] - u[-2]) / dx\n",
    "        return dudx\n",
    "\n",
    "    def Dxx(u):\n",
    "        d2 = np.zeros_like(u)\n",
    "        d2[1:-1] = (u[2:] - 2*u[1:-1] + u[:-2]) / (dx**2)\n",
    "        d2[0] = (u[2] - 2*u[1] + u[0]) / (dx**2)\n",
    "        d2[-1] = (u[-1] - 2*u[-2] + u[-3]) / (dx**2)\n",
    "        return d2\n",
    "\n",
    "    def rhs(phi_arr, psi_arr):\n",
    "        phi_x = Dx(phi_arr)\n",
    "        psi_x = Dx(psi_arr)\n",
    "        phi_xx = Dxx(phi_arr)\n",
    "        phi_t = psi_arr - v * phi_x\n",
    "        psi_t = - v * psi_x + (c**2) * phi_xx - sigma * psi_arr\n",
    "        return phi_t, psi_t\n",
    "\n",
    "    exploded = False\n",
    "    for n in range(Nt):\n",
    "        k1_phi, k1_psi = rhs(phi, psi)\n",
    "        k2_phi, k2_psi = rhs(phi + 0.5 * dt * k1_phi, psi + 0.5 * dt * k1_psi)\n",
    "        k3_phi, k3_psi = rhs(phi + 0.5 * dt * k2_phi, psi + 0.5 * dt * k2_psi)\n",
    "        k4_phi, k4_psi = rhs(phi + dt * k3_phi, psi + dt * k3_psi)\n",
    "\n",
    "        phi_next = phi + (dt / 6.0) * (k1_phi + 2*k2_phi + 2*k3_phi + k4_phi)\n",
    "        psi_next = psi + (dt / 6.0) * (k1_psi + 2*k2_psi + 2*k3_psi + k4_psi)\n",
    "\n",
    "        phi_next[0] = phi_next[1]; phi_next[-1] = phi_next[-2]\n",
    "        psi_next[0] = psi_next[1]; psi_next[-1] = psi_next[-2]\n",
    "\n",
    "        if (n % snap_step) == 0:\n",
    "            space_time_snaps[snap_i, :] = phi.copy().astype(np.float32)\n",
    "            snap_times[snap_i] = n * dt\n",
    "            snap_i += 1\n",
    "\n",
    "        probe_left[n] = phi[probe_left_idx]\n",
    "        probe_right[n] = phi[probe_right_idx]\n",
    "\n",
    "        phi_x = Dx(phi)\n",
    "        psi_conv = psi\n",
    "        e = 0.5 * np.sum( psi_conv**2 + (c**2) * (phi_x**2) ) * dx\n",
    "        energy[n] = e\n",
    "\n",
    "        if not np.isfinite(e):\n",
    "            exploded = True\n",
    "            print(f\"[RK4] numeric blow-up at step {n}; energy = {e}\")\n",
    "            break\n",
    "\n",
    "        phi, psi = phi_next, psi_next\n",
    "\n",
    "        if (progress_callback is not None) and (n % max(1, Nt//100) == 0):\n",
    "            pct = int(100 * (n+1)/Nt)\n",
    "            try:\n",
    "                progress_callback(pct)\n",
    "            except Exception:\n",
    "                pass\n",
    "\n",
    "    if snap_i < n_snaps:\n",
    "        space_time_snaps = space_time_snaps[:snap_i]\n",
    "        snap_times = snap_times[:snap_i]\n",
    "\n",
    "    if not exploded:\n",
    "        signal = probe_right - np.mean(probe_right)\n",
    "        window = np.hanning(Nt)\n",
    "        sig_win = signal * window\n",
    "        yf = np.abs(rfft(sig_win))\n",
    "        xf = rfftfreq(Nt, dt)\n",
    "        psd = yf**2\n",
    "    else:\n",
    "        xf = np.array([]); psd = np.array([])\n",
    "\n",
    "    horizon_idx = int(np.argmin(np.abs(v - c)))\n",
    "    x_h_num = float(x[horizon_idx])\n",
    "    dcoef_dx = np.gradient(c**2 - v**2, x)\n",
    "    kappa = 0.5 * dcoef_dx[horizon_idx]\n",
    "    T_H_dimless = kappa / (2*np.pi)\n",
    "\n",
    "    metadata = dict(\n",
    "        Nx=int(Nx), L=float(L), dx=float(dx), Nt=int(Nt), dt=float(dt),\n",
    "        horizon_idx=horizon_idx, x_h_num=x_h_num,\n",
    "        kappa=float(kappa), T_H_dimless=float(T_H_dimless),\n",
    "        sigma_max=float(sigma_max), exploded=bool(exploded)\n",
    "    )\n",
    "\n",
    "    results = dict(\n",
    "        x=x, t=t, space_time_snaps=space_time_snaps, snap_times=snap_times,\n",
    "        probe_left=probe_left, probe_right=probe_right, v=v, c=c,\n",
    "        xf=xf, psd=psd, energy=energy, sigma_profile=sigma, metadata=metadata\n",
    "    )\n",
    "\n",
    "    if save_outputs:\n",
    "        os.makedirs(outdir, exist_ok=True)\n",
    "        np.savez_compressed(os.path.join(outdir, \"outputs.npz\"),\n",
    "                            space_time_snaps=space_time_snaps,\n",
    "                            snap_times=snap_times,\n",
    "                            probe_left=probe_left,\n",
    "                            probe_right=probe_right,\n",
    "                            energy=energy,\n",
    "                            sigma_profile=sigma,\n",
    "                            metadata=metadata)\n",
    "        print(f\"Saved compressed outputs to {os.path.join(outdir, 'outputs.npz')}\")\n",
    "\n",
    "    return results\n",
    "\n",
    "Nx_widget = widgets.IntSlider(value=300, min=80, max=2000, step=10, description='Nx')\n",
    "Nt_widget = widgets.IntSlider(value=900, min=200, max=5000, step=50, description='Nt')\n",
    "CFL_widget = widgets.FloatSlider(value=0.4, min=0.05, max=0.9, step=0.05, description='CFL')\n",
    "\n",
    "v_left_widget = widgets.FloatSlider(value=0.2, min=-1.0, max=1.0, step=0.01, description='v_left')\n",
    "v_right_widget = widgets.FloatSlider(value=1.5, min=0.0, max=3.0, step=0.01, description='v_right')\n",
    "x_h_widget = widgets.FloatSlider(value=0.5, min=0.0, max=1.0, step=0.01, description='x_h')\n",
    "trans_w_widget = widgets.FloatLogSlider(value=0.03, base=10, min=-3, max=-1, step=0.1, description='trans_w')\n",
    "\n",
    "k0_widget = widgets.FloatSlider(value=60.0, min=1.0, max=300.0, step=1.0, description='k0')\n",
    "packet_center_widget = widgets.FloatSlider(value=0.15, min=0.0, max=1.0, step=0.01, description='pkt_center')\n",
    "packet_width_widget = widgets.FloatSlider(value=0.03, min=0.005, max=0.2, step=0.005, description='pkt_width')\n",
    "\n",
    "preset_widget = widgets.Dropdown(\n",
    "    options=['Fast demo', 'Balanced', 'High-res'],\n",
    "    value='Balanced',\n",
    "    description='Preset'\n",
    ")\n",
    "\n",
    "save_checkbox = widgets.Checkbox(value=False, description='Save outputs')\n",
    "run_button = widgets.Button(description='Start Simulation', button_style='success')\n",
    "animate_button = widgets.Button(description='Animate', button_style='info')\n",
    "\n",
    "out = widgets.Output()\n",
    "_progress_text = widgets.HTML(value='')\n",
    "\n",
    "def apply_preset(change=None):\n",
    "    p = preset_widget.value\n",
    "    if p == 'Fast demo':\n",
    "        Nx_widget.value = 120\n",
    "        Nt_widget.value = 300\n",
    "        CFL_widget.value = 0.45\n",
    "        k0_widget.value = 40.0\n",
    "    elif p == 'Balanced':\n",
    "        Nx_widget.value = 300\n",
    "        Nt_widget.value = 900\n",
    "        CFL_widget.value = 0.4\n",
    "        k0_widget.value = 60.0\n",
    "    elif p == 'High-res':\n",
    "        Nx_widget.value = 700\n",
    "        Nt_widget.value = 3000\n",
    "        CFL_widget.value = 0.35\n",
    "        k0_widget.value = 80.0\n",
    "\n",
    "preset_widget.observe(apply_preset, names='value')\n",
    "apply_preset()\n",
    "\n",
    "def plot_summary(res, show_v_profile=True):\n",
    "    x = res['x']\n",
    "    snaps = res['space_time_snaps']\n",
    "    times = res['snap_times']\n",
    "    meta = res['metadata']\n",
    "\n",
    "    fig = plt.figure(constrained_layout=True, figsize=(10,5))\n",
    "    gs = fig.add_gridspec(3, 4)\n",
    "    ax0 = fig.add_subplot(gs[0:2, :2])\n",
    "    ax1 = fig.add_subplot(gs[0, 2:])\n",
    "    ax2 = fig.add_subplot(gs[1, 2:])\n",
    "    ax3 = fig.add_subplot(gs[2, :2])\n",
    "    ax4 = fig.add_subplot(gs[2, 2:])\n",
    "\n",
    "    mid_idx = max(0, snaps.shape[0]//2)\n",
    "    ax0.plot(x, snaps[mid_idx, :])\n",
    "    ax0.axvline(meta.get('x_h_num', x[len(x)//2]), color='k', linestyle='--', label='horizon')\n",
    "    ax0.set_xlabel('x'); ax0.set_ylabel('Ï†'); ax0.set_title('Sample Ï†(x)')\n",
    "\n",
    "    t_full = res['t']\n",
    "    ax1.plot(t_full, res['probe_left'], label='probe_left')\n",
    "    ax1.plot(t_full, res['probe_right'], label='probe_right')\n",
    "    ax1.set_title('Probes'); ax1.set_xlabel('t'); ax1.legend()\n",
    "\n",
    "    if res['xf'].size > 0 and np.isfinite(res['psd']).any():\n",
    "        mask = np.isfinite(res['psd']) & (res['xf']>0)\n",
    "        if np.any(mask):\n",
    "            ax2.loglog(res['xf'][mask], res['psd'][mask])\n",
    "    ax2.set_title('PSD (downstream)'); ax2.set_xlabel('freq')\n",
    "\n",
    "    energy = res['energy']\n",
    "    maskE = np.isfinite(energy)\n",
    "    if np.any(maskE):\n",
    "        ax3.plot(t_full[maskE], energy[maskE])\n",
    "    ax3.set_title('Energy vs time'); ax3.set_xlabel('t'); ax3.set_ylabel('E')\n",
    "\n",
    "    ax4.plot(x, res['v'])\n",
    "    ax4.axvline(meta.get('x_h_num', x[len(x)//2]), color='k', linestyle='--')\n",
    "    ax4.set_title('v(x)')\n",
    "\n",
    "    plt.show()\n",
    "\n",
    "_last_result = None\n",
    "def make_animation(res, interval=50):\n",
    "    snaps = res['space_time_snaps']\n",
    "    x = res['x']\n",
    "    times = res['snap_times']\n",
    "\n",
    "    fig, ax = plt.subplots(figsize=(8,3))\n",
    "    line, = ax.plot(x, snaps[0, :])\n",
    "    ax.set_xlabel('x'); ax.set_ylabel('Ï†')\n",
    "    ax.axvline(res['metadata'].get('x_h_num', x[len(x)//2]), color='k', linestyle='--')\n",
    "\n",
    "    def update(i):\n",
    "        line.set_ydata(snaps[i, :])\n",
    "        ax.set_title(f't = {times[i]:.3f} (frame {i+1}/{snaps.shape[0]})')\n",
    "        return (line,)\n",
    "\n",
    "    anim = animation.FuncAnimation(fig, update, frames=snaps.shape[0], interval=interval, blit=True)\n",
    "    return anim\n",
    "\n",
    "def progress_callback(percent):\n",
    "    _progress_text.value = f\"<b>Progress:</b> {percent}%\"\n",
    "\n",
    "def on_run_clicked(b):\n",
    "    with out:\n",
    "        clear_output(wait=True)\n",
    "        display(_progress_text)\n",
    "        print(\"Starting simulation...\\n\")\n",
    "        try:\n",
    "            params = dict(\n",
    "                L=1.0, CFL=float(CFL_widget.value),\n",
    "                v_left=float(v_left_widget.value), v_right=float(v_right_widget.value),\n",
    "                x_h=float(x_h_widget.value), transition_width=float(trans_w_widget.value),\n",
    "                k0=float(k0_widget.value), packet_center=float(packet_center_widget.value),\n",
    "                packet_width=float(packet_width_widget.value)\n",
    "            )\n",
    "            Nx = int(Nx_widget.value); Nt = int(Nt_widget.value)\n",
    "            res = run_sonic_bh_mvp_rk4(Nx=Nx, Nt=Nt, max_snapshots=200,\n",
    "                                       progress_callback=progress_callback, save_outputs=bool(save_checkbox.value),\n",
    "                                       **params)\n",
    "            _progress_text.value = '<b>Progress:</b> 100%'\n",
    "            print('\\nSimulation complete. Rendering summary...')\n",
    "            plot_summary(res)\n",
    "            global _last_result\n",
    "            _last_result = res\n",
    "            if save_checkbox.value:\n",
    "                print(f\"\\nSaved outputs to {os.path.abspath('./sonic_bh_mvp_output')}\")\n",
    "        except Exception as e:\n",
    "            print('Error:', e)\n",
    "\n",
    "run_button.on_click(on_run_clicked)\n",
    "\n",
    "def on_animate_clicked(b):\n",
    "    with out:\n",
    "        clear_output(wait=True)\n",
    "        if _last_result is None:\n",
    "            print('Run a simulation first.')\n",
    "            return\n",
    "        anim = make_animation(_last_result, interval=70)\n",
    "        display(HTML(anim.to_jshtml()))\n",
    "\n",
    "animate_button.on_click(on_animate_clicked)\n",
    "\n",
    "left_col = widgets.VBox([preset_widget, Nx_widget, Nt_widget, CFL_widget, save_checkbox, widgets.HBox([run_button, animate_button])])\n",
    "mid_col = widgets.VBox([v_left_widget, v_right_widget, x_h_widget, trans_w_widget])\n",
    "right_col = widgets.VBox([k0_widget, packet_center_widget, packet_width_widget, _progress_text])\n",
    "controls = widgets.HBox([left_col, mid_col, right_col])\n",
    "ui = widgets.VBox([controls, out])\n",
    "\n",
    "display(ui)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "206d2112-5412-4c7f-b381-6d48b8231df0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
